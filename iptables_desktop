#!/bin/bash
# shellcheck disable=SC2086

set -eu
# applies a basic iptables firewall for a desktop linux pc
# allows http,https, dns, dns over tls, ntp and ntpsec, and outbound pings
# meant to be absolutely bare bones 

INTERFACE='wlan0'

# If you have multiple interfaces, then set these variables to ''
IN_INTERFACE="-i ${INTERFACE}"
OUT_INTERFACE="-o ${INTERFACE}"

OUTBOUND_TCP_SERVICES='80 443 853 123 22'
OUTBOUND_UDP_SERVICES='53 123'
INBOUND_TCP_SERVICES=''
INBOUND_UDP_SERVICES=''

print_usage(){
  local usage="";
  usage=$(cat << 'HERE' 
  
Usage: sudo ./iptables_desktop ARG1

ARG1 can be:
-e or enable - enable firewall
-d or disable - disable firewall
-h or help - prints this help message
HERE
)
  echo "$usage"
}

check_run_as_root(){
  if (( EUID != 0 )); then
    echo "This script must be run as root/sudo"
    exit 1
  fi
}

enable_firewall(){
  apt-get -yy install iptables iptables-persistent
  clear_rules
  set_rules
  clear_rules ip6tables
  set_rules ip6tables
  netfilter-persistent save
  systemctl enable netfilter-persistent.service
}

disable_firewall(){
  clear_rules
  set_default_policies iptables ACCEPT
  clear_rules ip6tables
  set_default_policies ip6tables ACCEPT
  netfilter-persistent save
  systemctl disable netfilter-persistent.service
}

set_rules(){
  local iptables="${1:-iptables}"
  #set a restrictive default (so we can only allow in/out exactly what we want)
  set_default_policies ${iptables} DROP
  
  #Create chains for logging  
  #logs a match then drops the packet
  ${iptables} --new-chain LOG_DROP  
  ${iptables} --append LOG_DROP --jump LOG --log-prefix "iptables: DROP:" --log-level 6
  ${iptables} --append LOG_DROP --jump DROP
  #logs a match then accepts the packet
  ${iptables} --new-chain LOG_ACCEPT
  ${iptables} --append LOG_ACCEPT --jump LOG --log-prefix "iptables: ACCEPT:" --log-level 6
  ${iptables} --append LOG_ACCEPT --jump ACCEPT
  
  #allow local loopback
  ${iptables} --append INPUT -i lo --jump LOG_ACCEPT
  ${iptables} --append OUTPUT -o lo --jump LOG_ACCEPT
  
  if [ -n "${OUTBOUND_TCP_SERVICES}" ]; then
    #outbound tcp services, run though the array at top and set up.
    for service in ${OUTBOUND_TCP_SERVICES}; do
      ${iptables} --append INPUT ${IN_INTERFACE} -p tcp -m multiport --sports ${service} -m conntrack --ctstate ESTABLISHED,RELATED --jump LOG_ACCEPT
      ${iptables} --append OUTPUT ${OUT_INTERFACE} -p tcp -m multiport --dports ${service} -m conntrack --ctstate NEW,ESTABLISHED,RELATED --jump LOG_ACCEPT
    done
  fi
  
  if [ -n "${OUTBOUND_UDP_SERVICES}" ]; then
    #outbound udp services, run though the array at top and set up.
    for service in ${OUTBOUND_UDP_SERVICES}; do
      ${iptables} --append INPUT ${IN_INTERFACE} -p udp -m multiport --sports ${service} -m conntrack --ctstate ESTABLISHED,RELATED --jump LOG_ACCEPT
      ${iptables} --append OUTPUT ${OUT_INTERFACE} -p udp -m multiport --dports ${service} -m conntrack --ctstate NEW,ESTABLISHED,RELATED --jump LOG_ACCEPT
    done
  fi
  
  if [ -n "${INBOUND_TCP_SERVICES}" ]; then
    #inbound tcp services, run though the array at top and set up.
    for service in ${INBOUND_TCP_SERVICES}; do
      ${iptables} --append INPUT ${IN_INTERFACE} -p tcp -m multiport --sports ${service} -m conntrack --ctstate NEW,ESTABLISHED,RELATED --jump LOG_ACCEPT
      ${iptables} --append OUTPUT ${OUT_INTERFACE} -p tcp -m multiport --dports ${service} -m conntrack --ctstate ESTABLISHED,RELATED --jump LOG_ACCEPT
    done
  fi
  
  if [ -n "${INBOUND_UDP_SERVICES}" ]; then
    #inbound udp services, run though the array at top and set up.
    for service in ${INBOUND_UDP_SERVICES}; do
      ${iptables} --append INPUT ${IN_INTERFACE} -p tcp -m multiport --sports ${service} -m conntrack --ctstate NEW,ESTABLISHED,RELATED --jump LOG_ACCEPT
      ${iptables} --append OUTPUT ${OUT_INTERFACE} -p tcp -m multiport --dports ${service} -m conntrack --ctstate ESTABLISHED,RELATED --jump LOG_ACCEPT
    done
  fi
  
  local icmp='-p icmp --icmp-type '
  #allow outbound icmp, icmpv6 is used in ip6tables so had to put this if in here.
  if [[ ${iptables} = 'ip6tables' ]]; then
    icmp='-p icmpv6 --icmpv6-type '
  fi
  ${iptables} --append INPUT ${IN_INTERFACE} ${icmp} 0 -m conntrack --ctstate ESTABLISHED,RELATED --jump LOG_ACCEPT
  ${iptables} --append OUTPUT ${OUT_INTERFACE} ${icmp} 8  -m conntrack --ctstate NEW,ESTABLISHED,RELATED --jump LOG_ACCEPT
  
  #catchall
  ${iptables} --append INPUT ${IN_INTERFACE} --jump LOG_DROP
  ${iptables} --append OUTPUT ${OUT_INTERFACE} --jump LOG_DROP
  
  #print the rules
  ${iptables} --list --numeric --verbose --line-numbers  
}

clear_rules(){
  local iptables="${1:-iptables}"
 
  #delete all rules
  ${iptables} --flush
  
  #delete all chains
  ${iptables} --delete-chain
  
  #zero any counters for network traffic
  ${iptables} --zero
}

set_default_policies(){
  local iptables="${1:-iptables}"
  POLICY="${2:-DROP}"
  #set a permissive default 
  ${iptables} --policy INPUT ${POLICY}
  ${iptables} --policy OUTPUT ${POLICY}
  ${iptables} --policy FORWARD ${POLICY}
}

main(){
  echo "$(basename "$0") started"
  check_run_as_root
  
  case $1 in
    enable|-e|-E)
      #install iptables, and the iptables-persistent package which can load your rules on startup
      enable_firewall
      ;;
    disable|-d|-D)
      disable_firewall;
      ;;
    help|-h|-H)
      #print help
      print_usage;
      ;;
    *)
      print_usage;
      ;;
  esac
   
  echo "$(basename "$0") finished"
  exit 0;
}

# Run program
main "${1:-'-h'}";
